generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String                 @id @default(cuid())
  name              String?
  email             String?                @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  accounts          Account[]
  projects          Project[]
  sessions          Session[]
  organizationTypes YarnOrganizationType[]
  yarns             Yarn[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("in_progress")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  yarns       Yarn[]   @relation("ProjectToYarn")

  @@map("projects")
}

model Yarn {
  id           String             @id @default(cuid())
  brand        String
  userId       String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  materials    String
  productLine  String
  totalWeight  Float
  totalYards   Float
  yardsPerOz   String
  weight       Int
  currColor    String?
  nextColor    String?
  prevColor    String?
  dyeStatus    DyeStatus          @default(NOT_TO_BE_DYED)
  organization YarnOrganization[]
  photos       YarnPhoto[]
  tags         YarnTag[]
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects     Project[]          @relation("ProjectToYarn")

  @@map("yarns")
}

model YarnPhoto {
  id        String   @id @default(cuid())
  url       String
  yarnId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  yarn      Yarn     @relation(fields: [yarnId], references: [id], onDelete: Cascade)

  @@map("yarn_photos")
}

model YarnTag {
  id        String   @id @default(cuid())
  name      String
  yarnId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  yarn      Yarn     @relation(fields: [yarnId], references: [id], onDelete: Cascade)

  @@map("yarn_tags")
}

model YarnOrganizationType {
  id            String             @id @default(cuid())
  name          String             @unique
  isSystem      Boolean            @default(false)
  userId        String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  user          User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizations YarnOrganization[]

  @@map("yarn_organization_types")
}

model YarnOrganization {
  id        String               @id @default(cuid())
  typeId    String
  quantity  Int
  yarnId    String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  type      YarnOrganizationType @relation(fields: [typeId], references: [id])
  yarn      Yarn                 @relation(fields: [yarnId], references: [id], onDelete: Cascade)

  @@map("yarn_organizations")
}

enum DyeStatus {
  NOT_TO_BE_DYED
  TO_BE_DYED
  HAS_BEEN_DYED
}
